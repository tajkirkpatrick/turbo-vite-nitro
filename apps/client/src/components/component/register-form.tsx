import { useForm } from "@tanstack/react-form";
import { valibotValidator } from "@tanstack/valibot-form-adapter";
/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/EKtigfEiXUx
 */
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";

export function RegisterForm() {
  const form = useForm({
    defaultValues: {
      username: "",
      email: "",
      password: "",
    },
    onSubmit: async ({ value }) => {
      // Do something with form data
      console.log(value);
    },
    validatorAdapter: valibotValidator,
  });

  return (
    <div className="flex min-h-screen items-center justify-center bg-gray-100">
      <div className="min-w-[450px] max-w-lg rounded-lg bg-white p-8 shadow-md">
        <h1 className="mb-6 text-center text-4xl font-bold">Sign Up</h1>
        <form.Provider>
          <form
            onSubmit={(e) => {
              e.preventDefault();
              e.stopPropagation();
              void form.handleSubmit();
            }}
          >
            <div className="mb-4">
              <form.Field
                name="username"
                children={(field) => (
                  <>
                    <label
                      className="block text-sm font-medium text-gray-700"
                      htmlFor={field.name}
                    >
                      Username
                    </label>
                    <Input
                      name={field.name}
                      value={field.state.value}
                      onBlur={field.handleBlur}
                      onChange={(e) => field.handleChange(e.target.value)}
                      className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50"
                      id={field.name}
                      placeholder={
                        field.name.charAt(0).toUpperCase() + field.name.slice(1)
                      }
                      type="text"
                    />
                  </>
                )}
              />
            </div>
            <div className="mb-4">
              <form.Field
                name="email"
                children={(field) => (
                  <>
                    <label
                      className="block text-sm font-medium text-gray-700"
                      htmlFor={field.name}
                    >
                      Email
                    </label>
                    <Input
                      name={field.name}
                      value={field.state.value}
                      onBlur={field.handleBlur}
                      onChange={(e) => field.handleChange(e.target.value)}
                      className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50"
                      id={field.name}
                      placeholder={
                        field.name.charAt(0).toUpperCase() + field.name.slice(1)
                      }
                      type="email"
                    />
                  </>
                )}
              />
            </div>
            <div className="mb-6">
              <form.Field
                name="password"
                children={(field) => (
                  <>
                    <label
                      className="block text-sm font-medium text-gray-700"
                      htmlFor={field.name}
                    >
                      Password
                    </label>
                    <Input
                      name={field.name}
                      value={field.state.value}
                      onBlur={field.handleBlur}
                      onChange={(e) => field.handleChange(e.target.value)}
                      className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50"
                      id={field.name}
                      placeholder={
                        field.name.charAt(0).toUpperCase() + field.name.slice(1)
                      }
                      type="password"
                    />
                  </>
                )}
              />
            </div>
            <div className="mb-4">
              <Button type="submit" className="w-full bg-blue-600 text-white">
                Submit
              </Button>
            </div>
          </form>
        </form.Provider>
        <div className="text-center">
          <p className="text-sm">
            Already have an account?{" "}
            <a className="text-blue-600 hover:underline" href="/login">
              Login
            </a>
          </p>
        </div>
      </div>
    </div>
  );
}
